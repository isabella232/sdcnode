#!/bin/bash
#
# Build a single node from a given JSON object describing build options.
# This is called with the cwd a fresh node.git clone. The node will be
# built (per the given options) and packaged up to
# 'sdcnode-$version-$compilerTag-$buildTag-$buildStamp.tgz'
#
# Usage:
#   ./tools/build-a-node BUILD-OPTS BUILD-STAMP
#
# Example:
#   ./tools/build-a-node '{"version": "v0.6.18"}' master-gcafe0123-20120203T120000Z
#
# Supported build options:
# - version:
# - configure_flags:
# - build_env:
# - build_tag:
# - npm_version: Optional. A commitish for a special version of npm to pull in
#   and replace the one include with the given node version.
# - npm_repo: Optional. If `npm_version` is used, this can be set to an alternative
#   git repo (e.g. an npm fork). This is only intended for pre-release experimental
#   builds. The default repo URL is "git://github.com/isaacs/npm.git"

export PS4='${BASH_SOURCE}:${LINENO}: ${FUNCNAME[0]:+${FUNCNAME[0]}(): }'
set -o xtrace
set -o errexit
set -o pipefail


TOP=$(cd $(dirname $0)/../ >/dev/null; pwd)
buildOpts=$1
buildStamp=$2


echo ""
echo "# Building node in `pwd` with this config:"
echo "$buildOpts" | json

version=$(echo "$buildOpts" | json version)
git checkout $version

npmVersion=$(echo "$buildOpts" | json npm_version)
if [[ -n "$npmVersion" ]]; then
    npmRepo=$(echo "$buildOpts" | json npm_repo)
    rm -rf deps/npm
    if [[ -n "$npmRepo" ]]; then
        git clone $npmRepo deps/npm
    else
        git clone git://github.com/isaacs/npm.git deps/npm
    fi
    (cd deps/npm && git checkout $npmVersion)
fi

configureFlags=$(echo "$buildOpts" | json configure_flags)
if [[ -z "$configureFlags" ]]; then
    configureFlags="--with-dtrace"
fi
buildEnv=$(echo "$buildOpts" | json build_env)
eval "export $buildEnv"
./configure $configureFlags --prefix=`pwd`/sdcnode-build/node
make V=1 CC=/opt/local/bin/gcc CXX=/opt/local/bin/g++
make V=1 CC=/opt/local/bin/gcc CXX=/opt/local/bin/g++ install

# package
buildTag=$(echo "$buildOpts" | json build_tag)
if [[ -n "$buildTag" ]]; then
    buildTag=-$buildTag
fi
gccVersion=$(gcc --version | head -1 | awk '{print $NF}')
packageName=sdcnode-$version-gcc$gccVersion$buildTag-$buildStamp.tgz
cd sdcnode-build && tar czf ../$packageName node
